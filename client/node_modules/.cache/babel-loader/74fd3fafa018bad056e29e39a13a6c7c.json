{"ast":null,"code":"export function pluralize(name, count) {\n  if (count === 1) {\n    return name;\n  }\n  return name + 's';\n}\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n    request.onupgradeneeded = function (e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', {\n        keyPath: '_id'\n      });\n      db.createObjectStore('categories', {\n        keyPath: '_id'\n      });\n      db.createObjectStore('cart', {\n        keyPath: '_id'\n      });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function (e) {\n      console.log('There was an error');\n    };\n\n    // on database open success\n    request.onsuccess = function (e) {\n      // save a reference of the database to the `db` variable\n      db = request.result;\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // if there's any errors, let us know\n      db.onerror = function (e) {\n        console.log('error', e);\n      };\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function () {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      // when the transaction is complete, close the connection\n      tx.oncomplete = function () {\n        db.close();\n      };\n    };\n  });\n}","map":{"version":3,"names":["pluralize","name","count","idbPromise","storeName","method","object","Promise","resolve","reject","request","window","indexedDB","open","db","tx","store","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close"],"sources":["C:/Users/jakee/Documents/shop-shop/client/src/utils/helpers.js"],"sourcesContent":["export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n    request.onupgradeneeded = function (e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function (e) {\n      console.log('There was an error');\n    };\n\n    // on database open success\n    request.onsuccess = function (e) {\n      // save a reference of the database to the `db` variable\n      db = request.result;\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // if there's any errors, let us know\n      db.onerror = function (e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function () {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      // when the transaction is complete, close the connection\n      tx.oncomplete = function () {\n        db.close();\n      };\n    };\n\n  });\n}\n"],"mappings":"AAAA,OAAO,SAASA,SAASA,CAACC,IAAI,EAAEC,KAAK,EAAE;EACrC,IAAIA,KAAK,KAAK,CAAC,EAAE;IACf,OAAOD,IAAI;EACb;EACA,OAAOA,IAAI,GAAG,GAAG;AACnB;AAEA,OAAO,SAASE,UAAUA,CAACC,SAAS,EAAEC,MAAM,EAAEC,MAAM,EAAE;EACpD,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC;IACA,MAAMC,OAAO,GAAGC,MAAM,CAACC,SAAS,CAACC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;;IAErD;IACA,IAAIC,EAAE,EAAEC,EAAE,EAAEC,KAAK;;IAEjB;IACAN,OAAO,CAACO,eAAe,GAAG,UAAUC,CAAC,EAAE;MACrC,MAAMJ,EAAE,GAAGJ,OAAO,CAACS,MAAM;MACzB;MACAL,EAAE,CAACM,iBAAiB,CAAC,UAAU,EAAE;QAAEC,OAAO,EAAE;MAAM,CAAC,CAAC;MACpDP,EAAE,CAACM,iBAAiB,CAAC,YAAY,EAAE;QAAEC,OAAO,EAAE;MAAM,CAAC,CAAC;MACtDP,EAAE,CAACM,iBAAiB,CAAC,MAAM,EAAE;QAAEC,OAAO,EAAE;MAAM,CAAC,CAAC;IAClD,CAAC;;IAED;IACAX,OAAO,CAACY,OAAO,GAAG,UAAUJ,CAAC,EAAE;MAC7BK,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACnC,CAAC;;IAED;IACAd,OAAO,CAACe,SAAS,GAAG,UAAUP,CAAC,EAAE;MAC/B;MACAJ,EAAE,GAAGJ,OAAO,CAACS,MAAM;MACnB;MACAJ,EAAE,GAAGD,EAAE,CAACY,WAAW,CAACtB,SAAS,EAAE,WAAW,CAAC;MAC3C;MACAY,KAAK,GAAGD,EAAE,CAACY,WAAW,CAACvB,SAAS,CAAC;;MAEjC;MACAU,EAAE,CAACQ,OAAO,GAAG,UAAUJ,CAAC,EAAE;QACxBK,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEN,CAAC,CAAC;MACzB,CAAC;MAED,QAAQb,MAAM;QACZ,KAAK,KAAK;UACRW,KAAK,CAACY,GAAG,CAACtB,MAAM,CAAC;UACjBE,OAAO,CAACF,MAAM,CAAC;UACf;QACF,KAAK,KAAK;UACR,MAAMuB,GAAG,GAAGb,KAAK,CAACc,MAAM,CAAC,CAAC;UAC1BD,GAAG,CAACJ,SAAS,GAAG,YAAY;YAC1BjB,OAAO,CAACqB,GAAG,CAACV,MAAM,CAAC;UACrB,CAAC;UACD;QACF,KAAK,QAAQ;UACXH,KAAK,CAACe,MAAM,CAACzB,MAAM,CAAC0B,GAAG,CAAC;UACxB;QACF;UACET,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;UAC9B;MACJ;;MAEA;MACAT,EAAE,CAACkB,UAAU,GAAG,YAAY;QAC1BnB,EAAE,CAACoB,KAAK,CAAC,CAAC;MACZ,CAAC;IACH,CAAC;EAEH,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module"}
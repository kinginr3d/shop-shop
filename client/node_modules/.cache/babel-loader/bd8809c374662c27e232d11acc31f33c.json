{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jakee\\\\Documents\\\\shop-shop\\\\client\\\\src\\\\components\\\\ProductList\\\\index.js\";\nimport React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport spinner from '../../assets/spinner.gif';\nimport { idbPromise } from \"../../utils/helpers\";\nfunction ProductList() {\n  const [state, dispatch] = useStoreContext();\n  const {\n    currentCategory\n  } = state;\n  const {\n    loading,\n    data\n  } = useQuery(QUERY_PRODUCTS);\n  useEffect(() => {\n    // if there's data to be stored\n    if (data) {\n      // let's store it in the global state object\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      // but let's also take each product and save it to IndexedDB using the helper function \n      data.products.forEach(product => {\n        idbPromise('products', 'put', product);\n      });\n    }\n  }, [data, loading, dispatch]);\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"my-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, \"Our Products:\"), state.products.length ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, filterProducts().map(product => /*#__PURE__*/React.createElement(ProductItem, {\n    key: product._id,\n    _id: product._id,\n    image: product.image,\n    name: product.name,\n    price: product.price,\n    quantity: product.quantity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }))) : /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, \"You haven't added any products yet!\"), loading ? /*#__PURE__*/React.createElement(\"img\", {\n    src: spinner,\n    alt: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 18\n    }\n  }) : null);\n}\nexport default ProductList;","map":{"version":3,"names":["React","useEffect","useQuery","useStoreContext","UPDATE_PRODUCTS","ProductItem","QUERY_PRODUCTS","spinner","idbPromise","ProductList","state","dispatch","currentCategory","loading","data","type","products","forEach","product","filterProducts","filter","category","_id","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","length","map","key","image","name","price","quantity","src","alt"],"sources":["C:/Users/jakee/Documents/shop-shop/client/src/components/ProductList/index.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\n\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport spinner from '../../assets/spinner.gif';\n\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductList() {\n  const [state, dispatch] = useStoreContext();\n  const { currentCategory } = state;\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    // if there's data to be stored\n    if (data) {\n      // let's store it in the global state object\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      // but let's also take each product and save it to IndexedDB using the helper function \n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}